# ==========================
# /engine.py
# ==========================

"""
Module d'orchestration principal pour Track-A-FACE
Coordonne les calculs de co√ªts et fournit une API unifi√©e
"""

import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from pathlib import Path

from engine_classes import CostCalculator, TotalCostSummary, CostBreakdown
from input_handler import RestaurantInputs, InputHandler, create_sample_inputs
from sql import DatabaseManager, DatabaseInitializer
from config import DATABASE_CONFIG

logger = logging.getLogger(__name__)


class CalculationEngine:
    """
    Moteur principal d'orchestration des calculs Track-A-FACE
    Coordonne tous les modules pour fournir une interface unifi√©e
    """
    
    def __init__(self, db_path: Optional[Path] = None):
        """
        Initialise le moteur de calcul
        
        Args:
            db_path: Chemin vers la base de donn√©es (optionnel)
        """
        self.db_manager = DatabaseManager(db_path)
        self.cost_calculator = CostCalculator(self.db_manager)
        self.input_handler = InputHandler()
        self._ensure_database_ready()
        
        logger.info("Moteur de calcul Track-A-FACE initialis√©")
    
    def _ensure_database_ready(self):
        """S'assure que la base de donn√©es est initialis√©e"""
        try:
            # V√©rifier si la DB existe et est accessible
            self.db_manager.connect()
            
            # Tester une requ√™te simple
            connection = self.db_manager.connection
            cursor = connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM cost_factors")
            factor_count = cursor.fetchone()[0]
            
            if factor_count == 0:
                logger.warning("Base de donn√©es vide, initialisation...")
                db_init = DatabaseInitializer()
                db_init.db_manager = self.db_manager
                db_init.initialize_database()
            
            self.db_manager.disconnect()
            logger.info(f"Base de donn√©es pr√™te avec {factor_count} facteurs de co√ªt")
            
        except Exception as e:
            logger.error(f"Erreur d'initialisation de la base: {e}")
            # Initialiser une nouvelle base
            db_init = DatabaseInitializer()
            db_init.db_manager = self.db_manager
            db_init.initialize_database()
    
    def calculate_restaurant_costs(self, inputs: RestaurantInputs) -> TotalCostSummary:
        """
        Calcule tous les co√ªts pour un restaurant
        
        Args:
            inputs: Param√®tres d'entr√©e du restaurant
            
        Returns:
            R√©sum√© complet des co√ªts calcul√©s
        """
        logger.info(f"D√©but du calcul pour: {inputs.session_name}")
        
        try:
            # Connecter √† la base
            self.db_manager.connect()
            
            # Ex√©cuter les calculs
            summary = self.cost_calculator.calculate_all_costs(inputs)
            
            # D√©connecter
            self.db_manager.disconnect()
            
            logger.info(f"Calculs termin√©s - Total: {summary.total_cost:,.2f} CAD$")
            return summary
            
        except Exception as e:
            logger.error(f"Erreur lors du calcul: {e}")
            if self.db_manager.connection:
                self.db_manager.disconnect()
            raise
    
    def create_inputs_from_dict(self, data: Dict) -> RestaurantInputs:
        """
        Cr√©e des entr√©es valid√©es √† partir d'un dictionnaire
        
        Args:
            data: Dictionnaire avec les param√®tres du restaurant
            
        Returns:
            Objet RestaurantInputs valid√©
        """
        return self.input_handler.create_inputs(**data)
    
    def run_sample_calculation(self) -> TotalCostSummary:
        """
        Ex√©cute un calcul avec des donn√©es d'exemple
        Utile pour les tests et d√©monstrations
        
        Returns:
            R√©sum√© des co√ªts calcul√©s
        """
        logger.info("Ex√©cution d'un calcul d'exemple")
        
        # Cr√©er des entr√©es d'exemple
        sample_inputs = create_sample_inputs()
        
        # Calculer
        return self.calculate_restaurant_costs(sample_inputs)
    
    def batch_calculate(self, inputs_list: List[RestaurantInputs]) -> List[TotalCostSummary]:
        """
        Calcule les co√ªts pour plusieurs restaurants en lot
        
        Args:
            inputs_list: Liste des param√®tres de restaurants
            
        Returns:
            Liste des r√©sum√©s de co√ªts
        """
        logger.info(f"Calcul en lot pour {len(inputs_list)} restaurants")
        
        results = []
        self.db_manager.connect()
        
        try:
            for inputs in inputs_list:
                summary = self.cost_calculator.calculate_all_costs(inputs)
                results.append(summary)
                logger.info(f"Calcul√©: {inputs.session_name} - {summary.total_cost:,.2f} CAD$")
        
        finally:
            self.db_manager.disconnect()
        
        return results
    
    def get_cost_breakdown_by_category(self, summary: TotalCostSummary) -> Dict[str, List[CostBreakdown]]:
        """
        Organise les d√©tails de co√ªts par cat√©gorie
        
        Args:
            summary: R√©sum√© des co√ªts
            
        Returns:
            Dictionnaire organis√© par cat√©gorie
        """
        breakdown_by_category = {
            'staff': [],
            'equipment': [],
            'location': [],
            'operations': []
        }
        
        for breakdown in summary.cost_breakdowns:
            if breakdown.category in breakdown_by_category:
                breakdown_by_category[breakdown.category].append(breakdown)
        
        return breakdown_by_category
    
    def generate_calculation_report(self, summary: TotalCostSummary) -> str:
        """
        G√©n√®re un rapport d√©taill√© des calculs
        
        Args:
            summary: R√©sum√© des co√ªts
            
        Returns:
            Rapport format√© en texte
        """
        report_lines = [
            "=" * 60,
            f"RAPPORT DE CALCUL - {summary.session_name}",
            f"G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "=" * 60,
            "",
            "üìä R√âSUM√â DES CO√õTS:",
            f"  Personnel:     {summary.staff_costs:>12,.2f} CAD$",
            f"  √âquipement:    {summary.equipment_costs:>12,.2f} CAD$",
            f"  Immobilier:    {summary.location_costs:>12,.2f} CAD$",
            f"  Op√©rationnel:  {summary.operational_costs:>12,.2f} CAD$",
            f"  {'‚îÄ' * 35}",
            f"  TOTAL:         {summary.total_cost:>12,.2f} CAD$",
            "",
            "üìã D√âTAIL DES CALCULS:"
        ]
        
        # Organiser par cat√©gorie
        breakdown_by_cat = self.get_cost_breakdown_by_category(summary)
        
        for category, breakdowns in breakdown_by_cat.items():
            if breakdowns:
                category_names = {
                    'staff': 'PERSONNEL',
                    'equipment': '√âQUIPEMENT', 
                    'location': 'IMMOBILIER',
                    'operations': 'OP√âRATIONNEL'
                }
                
                report_lines.append(f"\n  {category_names[category]}:")
                for breakdown in breakdowns:
                    report_lines.append(f"    {breakdown.subcategory}: {breakdown.amount:,.2f} CAD$")
                    if breakdown.formula:
                        report_lines.append(f"      Formule: {breakdown.formula}")
        
        report_lines.extend(["", "=" * 60])
        
        return "\n".join(report_lines)
    
    def validate_calculation_accuracy(self, summary: TotalCostSummary) -> bool:
        """
        Valide la coh√©rence des calculs
        
        Args:
            summary: R√©sum√© √† valider
            
        Returns:
            True si les calculs sont coh√©rents
        """
        # V√©rifier que le total correspond √† la somme des cat√©gories
        calculated_total = (
            summary.staff_costs + 
            summary.equipment_costs + 
            summary.location_costs + 
            summary.operational_costs
        )
        
        # Tol√©rance de 0.01 CAD pour les erreurs d'arrondi
        is_valid = abs(summary.total_cost - calculated_total) < 0.01
        
        if not is_valid:
            logger.warning(f"Incoh√©rence d√©tect√©e: Total={summary.total_cost}, Calcul√©={calculated_total}")
        
        return is_valid
    
    def close(self):
        """Ferme proprement les connexions"""
        if self.db_manager.connection:
            self.db_manager.disconnect()
        logger.info("Moteur de calcul ferm√©")


def run_engine_demo():
    """D√©monstration du moteur de calcul"""
    print("üöÄ D√©monstration du moteur Track-A-FACE")
    print("=" * 50)
    
    try:
        # Initialiser le moteur
        engine = CalculationEngine()
        
        # Ex√©cuter un calcul d'exemple
        print("\nüìä Calcul avec donn√©es d'exemple...")
        summary = engine.run_sample_calculation()
        
        # Valider les r√©sultats
        is_valid = engine.validate_calculation_accuracy(summary)
        print(f"‚úÖ Validation: {'R√©ussie' if is_valid else '√âchou√©e'}")
        
        # G√©n√©rer le rapport
        print("\nüìã Rapport d√©taill√©:")
        report = engine.generate_calculation_report(summary)
        print(report)
        
        # Fermer proprement
        engine.close()
        
        print("\n‚úÖ D√©monstration termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        logger.error(f"Erreur d√©monstration: {e}")


if __name__ == "__main__":
    # Configuration du logging pour le test
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Lancer la d√©monstration
    run_engine_demo()
